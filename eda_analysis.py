import os
from typing import List

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf


def ensure_reports_dir(path: str) -> None:
    """Create reports directory if missing."""
    os.makedirs(path, exist_ok=True)


def load_daily_history(csv_path: str) -> pd.DataFrame:
    """Load 1-year daily history file generated by api_project11.py."""
    if not os.path.exists(csv_path):
        raise FileNotFoundError(
            f"Expected daily history at {csv_path}. Run api_project11.py first."
        )
    df = pd.read_csv(csv_path)
    if "date" not in df.columns:
        raise ValueError("history_daily_1y.csv must contain a 'date' column")
    df["date"] = pd.to_datetime(df["date"], utc=True, errors="coerce").dt.date
    df = df.dropna(subset=["date"]).sort_values("date").reset_index(drop=True)
    return df


def summarize_numeric(df: pd.DataFrame, out_dir: str) -> None:
    """Compute describe() and correlations, save to CSVs."""
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    desc = df[numeric_cols].describe().T
    corr = df[numeric_cols].corr(numeric_only=True)
    desc.to_csv(os.path.join(out_dir, "summary_stats.csv"))
    corr.to_csv(os.path.join(out_dir, "correlations.csv"))


def plot_trends(df: pd.DataFrame, out_dir: str) -> None:
    """Plot AQI trend and 7/30-day rolling means."""
    ts = df.copy()
    ts["date"] = pd.to_datetime(ts["date"])  # make datetime indexable
    ts = ts.set_index("date")
    fig, ax = plt.subplots(figsize=(10, 4))
    ts["aqi_index"].plot(ax=ax, color="#1f77b4", label="AQI daily")
    ts["aqi_index"].rolling(7, min_periods=1).mean().plot(ax=ax, label="7D MA", color="#ff7f0e")
    ts["aqi_index"].rolling(30, min_periods=1).mean().plot(ax=ax, label="30D MA", color="#2ca02c")
    ax.set_title("Daily AQI – 1 Year with Rolling Means")
    ax.set_ylabel("AQI index")
    ax.legend()
    fig.tight_layout()
    fig.savefig(os.path.join(out_dir, "aqi_trend_rolling.png"), dpi=150)
    plt.close(fig)


def plot_box_by_month(df: pd.DataFrame, out_dir: str) -> None:
    """Boxplot of AQI by calendar month to show seasonality spread."""
    tmp = df.copy()
    tmp["date"] = pd.to_datetime(tmp["date"])
    tmp["month"] = tmp["date"].dt.month
    fig, ax = plt.subplots(figsize=(10, 4))
    sns.boxplot(data=tmp, x="month", y="aqi_index", ax=ax)
    ax.set_title("AQI Distribution by Month")
    ax.set_xlabel("Month")
    ax.set_ylabel("AQI index")
    fig.tight_layout()
    fig.savefig(os.path.join(out_dir, "aqi_box_by_month.png"), dpi=150)
    plt.close(fig)


def plot_components_corr_heatmap(df: pd.DataFrame, out_dir: str) -> None:
    """Heatmap of correlations between AQI and pollutant components."""
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    corr = df[numeric_cols].corr(numeric_only=True)
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.heatmap(corr, cmap="vlag", center=0, annot=False, ax=ax)
    ax.set_title("Correlation Heatmap: AQI and Components")
    fig.tight_layout()
    fig.savefig(os.path.join(out_dir, "corr_heatmap.png"), dpi=150)
    plt.close(fig)


def plot_acf_pacf_series(df: pd.DataFrame, out_dir: str) -> None:
    """ACF/PACF of daily AQI to assess autocorrelation structure."""
    ts = df.copy()
    ts["date"] = pd.to_datetime(ts["date"])  # ensure datetime index
    ts = ts.set_index("date")
    series = ts["aqi_index"].astype(float)
    fig, axes = plt.subplots(1, 2, figsize=(10, 4))
    plot_acf(series, ax=axes[0], lags=40)
    plot_pacf(series, ax=axes[1], lags=40, method="ywm")
    axes[0].set_title("ACF – Daily AQI")
    axes[1].set_title("PACF – Daily AQI")
    fig.tight_layout()
    fig.savefig(os.path.join(out_dir, "aqi_acf_pacf.png"), dpi=150)
    plt.close(fig)


def main() -> None:
    """Run EDA for 1-year daily AQI to support next-3-day prediction."""
    reports_dir = os.path.join("reports", "eda")
    ensure_reports_dir(reports_dir)

    daily_csv = os.path.join("data", "history_daily_1y.csv")
    df_daily = load_daily_history(daily_csv)

    # Save stats for report
    summarize_numeric(df_daily, reports_dir)

    # Plots for the report
    plot_trends(df_daily, reports_dir)
    plot_box_by_month(df_daily, reports_dir)
    plot_components_corr_heatmap(df_daily, reports_dir)
    try:
        plot_acf_pacf_series(df_daily, reports_dir)
    except Exception as e:
        # Some environments may miss statsmodels; still keep the rest of EDA
        print("Skipped ACF/PACF:", e)

    print("EDA artifacts saved to", reports_dir)


if __name__ == "__main__":
    main()